
"  _   __(_)___ ___  __________
" | | / / / __ `__ \/ ___/ ___/
" | |/ / / / / / / / /  / /__
" |___/_/_/ /_/ /_/_/   \___/

" vim:fdm=marker:ts=2:sw=2:et:

" Section: Setup {{{1
"------------------------------------------------------------------------------

 " General basic necessary plugins
set nocompatible                "Be iMproved, required
set backspace=indent,eol,start  "Make backspace behave well
syntax on                       "Enable syntax highlighting

"}}}

" Section: Plug {{{1
"------------------------------------------------------------------------------

filetype off                  " required

" set the runtime path to include Vundle and initialize
set rtp+=~/.vim/bundle/Vundle.vim
call vundle#begin()

" Esentials
Plugin 'VundleVim/Vundle.vim'
Plugin 'tpope/vim-surround'
Plugin 'tpope/vim-unimpaired'
Plugin 'tpope/vim-repeat'
Plugin 'tpope/vim-commentary'
Plugin 'tpope/vim-git'
Plugin 'tpope/vim-fugitive'
Plugin 'tpope/vim-abolish'
Plugin 'tpope/vim-speeddating'
Plugin 'tpope/vim-eunuch'
Plugin 'editorconfig/editorconfig-vim'
Plugin 'jeetsukumaran/vim-indentwise'
Plugin 'AndrewRadev/splitjoin.vim'
Plugin 'haya14busa/incsearch.vim'
Plugin 'gregsexton/matchtag'
Plugin 'qpkorr/vim-bufkill'
Plugin 'tpope/vim-projectionist'
Plugin 'noahfrederick/vim-laravel'

" Custom text objects
Plugin 'michaeljsmith/vim-indent-object'
Plugin 'kana/vim-textobj-user'
Plugin 'thinca/vim-textobj-between'
Plugin 'kana/vim-textobj-line'
Plugin 'andyl/vim-textobj-elixir'
Plugin 'glts/vim-textobj-comment'
Plugin 'sgur/vim-textobj-parameter'
Plugin 'whatyouhide/vim-textobj-xmlattr'

" Navigation
Plugin 'christoomey/vim-tmux-navigator'
Plugin 'tpope/vim-vinegar'
Plugin 'ctrlpvim/ctrlp.vim'
Plugin 'majutsushi/tagbar'
Plugin 'mileszs/ack.vim'
Plugin 'justinmk/vim-sneak'

" Visuals
Plugin 'itchyny/lightline.vim'
Plugin 'nanotech/jellybeans.vim'

" Powertools
Plugin 'tpope/vim-dispatch'
Plugin 'janko-m/vim-test'
Plugin 'terryma/vim-multiple-cursors'
Plugin 'airblade/vim-gitgutter'
Plugin 'w0rp/ale'
Plugin 'benmills/vimux'
" Plugin 'idanarye/vim-casetrate'
Plugin 'embear/vim-localvimrc'
Plugin 'skwp/greplace.vim'
Plugin 'tpope/vim-db'
Plugin 'junegunn/vim-peekaboo'
Plugin 'osyo-manga/vim-over'

" Completion
Plugin 'jiangmiao/auto-pairs'
Plugin 'SirVer/ultisnips'
Plugin 'ervandew/supertab'

" Languages
Plugin 'sheerun/vim-polyglot'
Plugin 'tpope/vim-endwise'
Plugin 'elixir-lang/vim-elixir'
Plugin 'elmcast/elm-vim'
Plugin 'posva/vim-vue'
Plugin 'pangloss/vim-javascript'
Plugin 'arnaud-lb/vim-php-namespace'
Plugin 'shawncplus/phpcomplete.vim'

call vundle#end()            " required
filetype plugin indent on    " Enable file type detection and do language-dependent indenting.

"}}}

" Section: General config {{{1
"------------------------------------------------------------------------------

syntax enable

let mapleader = "\<Space>"

" let mapleader = ','
let maplocalleader = '\\'

set smartindent
set number
set relativenumber
set expandtab
set tabstop=2
set softtabstop=2                         " Insert mode
set shiftwidth=2                          " Spaces when using < and >
set complete=.,w,b,u                      " Autocomplete looks through current buffer, window, loaded buffers, unloaded buffers
set wildmenu
set wildignore+=*/.git,*/tmp/*,*.so,*.swp,*.zip
set nojoinspaces
set listchars=tab:▸\ ,eol:¬
set foldmethod=marker                     " Use braces by default
set foldlevelstart=20                     " Do not open folds by default
set fillchars=fold:\                      " No chars
set autoread                              " Update buffers if file changed outside of VIM
set nocursorline
set nocursorcolumn
set signcolumn=yes
set showbreak=…                       " Nice ellipsis when wrapping lines
set rtp+=~/.fzf
set clipboard=unnamed

" Search
set nohlsearch
set incsearch
set ignorecase
set smartcase

" Splits
set splitbelow
set splitright

runtime! macros/matchit.vim
silent! set mouse=nvca

"}}}



" Section: Visual {{{1
"------------------------------------------------------------------------------

" dfferent colorscheme for ruby and markdown, for example
" autocmd FileType ruby colorscheme railcasts

set laststatus=2                         " Always display the status bar

" Make sure colored syntax mode is on, and make it Just Work with newer 256
" color terminals like iTerm2.
set background=dark
let g:rehash256 = 1

colorscheme jellybeans

if has('gui_running')
  set guicursor+=n-v-c:blinkon0
  set guioptions -=m
  set guioptions -=T
else
  if $TERM == "xterm-256color" || $TERM == "screen-256color" || $COLORTERM == "gnome-terminal"
    set t_Co=256
  elseif has("terminfo")
    colorscheme default
    set t_Co=8
    set t_Sf=[3%p1%dm
    set t_Sb=[4%p1%dm
  else
    colorscheme default
    set t_Co=8
    set t_Sf=[3%dm
    set t_Sb=[4%dm
  endif
  " Disable Background Color Erase when within tmux - https://stackoverflow.com/q/6427650/102704
  if $TMUX != ""
    set t_ut=
  endif
endif

highlight Normal ctermbg=NONE
highlight nonText ctermbg=NONE
highlight SignColumn ctermbg=NONE
highlight TabLineFill ctermbg=NONE
highlight CursorLineNr  ctermbg=NONE
highlight Normal        ctermbg=NONE
highlight nonText       ctermbg=NONE
highlight LineNr        ctermbg=NONE
highlight Folded        ctermbg=NONE ctermfg=lightgray

" highlight SignColumn    ctermbg=NONE
" highlight TabLineFill ctermfg=LightGreen ctermbg=darkBlue
" highlight TabLine ctermfg=Blue ctermbg=Yellow
" highlight TabLineSel ctermfg=Red ctermbg=Yellow
" highlight Normal        cterm=NONE ctermbg=NONE
" highlight StatusLine    cterm=NONE ctermbg=blue ctermfg=white
" Fix the & command in normal and visual modes
nnoremap & :&&<Enter>
xnoremap & :&&<Enter>

" 1}}}



" Section: Mappings {{{1
"------------------------------------------------------------------------------

" Move up and down by screen line
noremap k gk
noremap j gj

map <Leader>P :set paste<CR>o<esc>"*]p:set nopaste<cr>

inoremap jk <Esc>

nnoremap K <nop>


map /  <Plug>(incsearch-forward)
map ?  <Plug>(incsearch-backward)
map g/ <Plug>(incsearch-stay)

nnoremap <Up> :resize +5<cr>
nnoremap <Down> :resize -5<cr>
nnoremap <Left> :vertical resize -5<cr>
nnoremap <Right> :vertical resize +5<cr>

command! Wip call VimuxRunCommand("u --group wip")
command! So :source $MYVIMRC

" Switch to previous buffer
nnoremap <C-e> :e#<CR>

"
" " Emacs-like bindings in command line -- `:help emacs-keys`
" cnoremap <C-b>  <Left>
" cnoremap <C-f>  <Right>
" cnoremap <C-d>  <Del>
cnoremap <C-a>  <Home>
cnoremap <C-e>  <End>
cnoremap <C-h>  <S-Left>
cnoremap <C-l>  <S-Right>

" cnoremap <M-d>  <S-right><Delete>
" cnoremap <Esc>d <S-right><Delete>
" cnoremap <C-g>  <C-c>"

" Supposed to be alt...?
nnoremap <M-f> za
" vnoremap <M-f> zf
" nnoremap <cr> za


" ctrl+s to save
nnoremap <C-s> :w<CR>
inoremap <C-s> <Esc>:w<CR>

" in insert mode, uppercase the current word
inoremap <c-u> <esc>gUiwea

" ctrl+[hjkl] to move between panes
nnoremap <C-j> <C-w><C-j>
nnoremap <C-k> <C-w><C-k>
nnoremap <C-h> <C-w><C-h>
nnoremap <C-l> <C-w><C-l>


" completion stuff
imap <c-x><c-k> <plug>(fzf-complete-word)
imap <c-x><c-f> <plug>(fzf-complete-path)
imap <c-x><c-j> <plug>(fzf-complete-file-ag)
" imap <c-x><c-l> <plug>(fzf-complete-line)
inoremap <expr> <c-x><c-k> fzf#vim#complete#word({'left': '15%'})



" ctrl+m to increment next number on the line
nnoremap     <C-m>               <C-a>

inoremap    <c-x><c-]>          <c-]>
nnoremap    <leader>\|          :vsp<cr>
nnoremap    <leader>-           :sp<cr>

nnoremap    <leader>2           :TagbarToggle<CR>

nnoremap    <leader>f           :Ack<space>
nnoremap    <leader>aw          :Ack <C-r><C-w><cr>
vnoremap    <leader>aw          y :Ack <C-r>"<cr>
nnoremap    <leader>aa          :Ack <C-r><C-w> app/<cr>
nnoremap    <leader>aj          :Ack <C-r><C-w> jsapp/<cr>
nnoremap    <leader>ar          :Ack <C-r><C-w> resources/assets<cr>
nnoremap    <leader>as          :Ack <C-r><C-w> src<cr>
nnoremap    <leader>av          :Ack <C-r><C-w> vendor/<cr>

" fuzzy stuff
" nnoremap    <leader>b           :CtrlPBuffer<cr>
nnoremap    <leader>b           :Buffers<cr>
nnoremap    <leader>r           :CtrlPMRU<cr>
nnoremap    <leader>]           :CtrlPTag<cr>
nnoremap    <leader>h           :History<cr>
" nnoremap    <leader>]           :Tags<cr>
nnoremap    <leader>f           :Files<cr>

" Insert Now or Date
nnoremap    <leader>dl          "=strftime("%Y-%m-%d %H:%M:%S")<CR>P
nnoremap    <leader>ds          "=strftime("%d/%m/%Y")<CR>P
nnoremap    <leader>dj          :+d<cr>
nnoremap    <leader>dk          :-d<cr>

nnoremap    <leader>ev          :tabedit $MYVIMRC<cr>
nnoremap    <leader>ep          :tabedit ~/.vim/plugins.vim<cr>
nnoremap    <leader>es          :call UltiSnipsEdit()<cr>
nnoremap    <Leader>i           vip:sort<CR>
nnoremap    <leader>g           :Gstatus<CR>

nnoremap    <expr> gb           '`[' . strpart(getregtype(), 0, 1) . '`]'

" Planizely
nnoremap    <leader>pr          :edit routes/api.php<cr>

" p for php
nnoremap    <leader>pi          :call PhpInsertUse()<CR>
nnoremap    <leader>pe          :call PhpExpandClass()<CR>
nnoremap    <leader>ps          :call PhpSortUse()<CR>

nnoremap    <leader>q           :cclose<CR>
nnoremap    Q                   :BD<cr>

nnoremap    <leader>tt          :TestNearest<CR>
nnoremap    <silent><leader>tf  :TestFile<CR>
nnoremap    <silent><leader>ta  :TestSuite<CR>
nnoremap    <silent><leader>tl  :TestLast<CR>
nnoremap    <silent><leader>tg  :TestVisit<CR>
nnoremap    <leader>tsb         :let test#strategy = 'basic'<CR>
nnoremap    <leader>tsd         :let test#strategy = 'dispatch'<CR>

nnoremap    <Leader>vq :VimuxCloseRunner<CR>
nnoremap <Leader>vz :call VimuxZoomRunner()<CR>
nnoremap <Leader>vi :VimuxInspectRunner<CR>
map <Leader>vl :VimuxRunLastCommand<CR>
map <Leader>vp :VimuxPromptCommand<CR>
nnoremap    <leader>vr          :call VimuxRunLastCommand()<CR>
nnoremap    <leader>vc          :call VimuxCloseRunner()<CR>

nnoremap    [w                  :tabprevious<CR>
nnoremap    ]w                  :tabnext<CR>

nnoremap   zx                   :wq<cr>


" Operator pending movement.
" Interesting. Keep in mind.
" Need to re-read "learn vimscript the hard way" chapter
onoremap    p                   i(
onoremap    in(                 :<c-u>normal! f(vi(<cr>
onoremap    il(                 :<c-u>normal! F)vi(<cr>



"
" Abbreviations
"
autocmd BufEnter *.js  iabbr zzz console.log('ZZZ',
autocmd BufEnter *.vue iabbr xxx console.log('XXX',
autocmd BufEnter *.vue iabbr yyy console.log('YYY',
autocmd BufEnter *.vue iabbr zzz console.log('ZZZ',
autocmd BufEnter .vimlocal set filetype=vim


" Expand %% to current file directory in command line mode
cnoremap <expr> %% getcmdtype() == ':' ? expand('%:h').'/' : '%%'

"}}}



" Section: Plugins {{{1
"------------------------------------------------------------------------------

"/ VimCommentary
autocmd FileType php setlocal commentstring=\/\/\ %s
autocmd FileType vue setlocal commentstring=\/\/\ %s

""/ CtrlP
let g:ctrlp_extensions = ['tag']
" let g:ctrlp_match_window = 'top,order:ttb,min:1,max:20,results:20'    " window to the top and other settings
let g:ctrlp_custom_ignore = '\v[\/](\.git|\.hg|node_modules|vendor|_build|deps|*.beam)$' " ignore package managers huge folders

" set grepprg=ag\ --nogroup\ --nocolor
" let g:ctrlp_user_command = 'ag %s -l --nocolor -g ""'
" let g:ctrlp_use_caching = 1

set grepprg=rg\ --color=never
let g:ctrlp_user_command = 'rg %s --files --color=never --glob ""'
let g:ctrlp_use_caching = 1


"/ fzf
let $FZF_DEFAULT_COMMAND = 'rg --files --no-messages'


"/ VIM Test
let test#strategy = "dispatch"
" let test#strategy = "vimux"

"/ AutoPairs
let g:AutoPairsShortcutBackInsert = '<C-b>'

"/ UltiSnips
let g:UltiSnipsExpandTrigger="<tab>"
let g:UltiSnipsSnippetsDir="snippets"

"/ Supertab
let g:SuperTabLongestEnhanced=1
let g:SuperTabLongestHighlight=1


"/ incsearch.vim
" :h g:incsearch#auto_nohlsearch
set hlsearch
let g:incsearch#auto_nohlsearch = 1
map n  <Plug>(incsearch-nohl-n)
map N  <Plug>(incsearch-nohl-N)
map *  <Plug>(incsearch-nohl-*)
map #  <Plug>(incsearch-nohl-#)
map g* <Plug>(incsearch-nohl-g*)
map g# <Plug>(incsearch-nohl-g#)"


""/ Sneak
"nnoremap s s
"nnoremap S S
"" 2-character Sneak (default)
"nmap \ <Plug>Sneak_s
"nmap \ <Plug>Sneak_S
"" visual-mode
"xmap \ <Plug>Sneak_s
"xmap \ <Plug>Sneak_S
"" operator-pending-mode
"omap \ <Plug>Sneak_s
"omap \ <Plug>Sneak_S

"" repeat motion
"map \ <Plug>Sneak_;
"map \ <Plug>Sneak_,

"/ vimux
" let g:VimuxOrientation = "h"
" let g:VimuxHeight = "30"

"/ Gitgutter
highlight GitGutterAdd ctermfg=darkgreen ctermbg=NONE
highlight GitGutterChange ctermfg=yellow ctermbg=NONE
highlight GitGutterDelete ctermfg=darkred ctermbg=NONE
" highlight GitGutterChangeDelete ctermfg=lightgreen ctermbg=NONE


"/ ALE
let g:ale_sign_warning = '▲'
let g:ale_sign_error = '✗'
highlight NiceError ctermfg=red ctermbg=NONE
highlight NiceWarning ctermfg=yellow ctermbg=NONE
highlight link ALEWarningSign NiceWarning
highlight link ALEErrorSign NiceError


let g:ale_echo_msg_error_str = 'E'
let g:ale_echo_msg_warning_str = 'W'
" let g:ale_echo_msg_format = '[%linter%] %s [%severity%]'

let g:ale_fix_on_save = 1
nmap <F8> <Plug>(ale_fix)

let g:ale_linters = {
\  'php': ['php', 'phpcs', 'phpmd', 'phpstan']
\}

let g:ale_fixers = {
\   'php': [
\       'phpcbf'
\   ],
\   'elm': [
\       'format'
\   ],
\   'javascript': [
\       'eslint'
\   ]
\}

" php
let g:ale_php_phpcs_standard = 'phpcs.xml'
let g:ale_php_phpmd_ruleset = 'phpmd.xml'



"/ Lightline
let g:lightline = {
\ 'colorscheme': 'jellybeans',
\ 'active': {
\   'left': [['mode', 'paste'], ['filename', 'modified']],
\   'right': [['lineinfo'], ['percent'], ['readonly', 'linter_warnings', 'linter_errors', 'linter_ok']]
\ },
\ 'component_expand': {
\   'linter_warnings': 'LightlineLinterWarnings',
\   'linter_errors': 'LightlineLinterErrors',
\   'linter_ok': 'LightlineLinterOK'
\ },
\ 'component_type': {
\   'readonly': 'error',
\   'linter_warnings': 'warning',
\   'linter_errors': 'error'
\ },
\ }

function! LightlineLinterWarnings() abort
  let l:counts = ale#statusline#Count(bufnr(''))
  let l:all_errors = l:counts.error + l:counts.style_error
  let l:all_non_errors = l:counts.total - l:all_errors
  return l:counts.total == 0 ? '' : printf('%d ◆', all_non_errors)
endfunction

function! LightlineLinterErrors() abort
  let l:counts = ale#statusline#Count(bufnr(''))
  let l:all_errors = l:counts.error + l:counts.style_error
  let l:all_non_errors = l:counts.total - l:all_errors
  return l:counts.total == 0 ? '' : printf('%d ✗', all_errors)
endfunction

function! LightlineLinterOK() abort
  let l:counts = ale#statusline#Count(bufnr(''))
  let l:all_errors = l:counts.error + l:counts.style_error
  let l:all_non_errors = l:counts.total - l:all_errors
  return l:counts.total == 0 ? '✓ ' : ''
endfunction

autocmd User ALELint call s:MaybeUpdateLightline()

" Update and show lightline but only if it's visible (e.g., not in Goyo)
function! s:MaybeUpdateLightline()
  if exists('#lightline')
    call lightline#update()
  end
endfunction


"/ VimAck
let g:ackprg = 'rg --vimgrep'


"/ Autocorrect abbrev
iabbrev r return
iabbrev rq request
iabbrev rs response
iabbrev f function
iabbrev reutrn return
iabbrev retrun return
iabbrev repsonse response
iabbrev gropu group



"/ Splitjoin
let g:splitjoin_split_mapping = ''
let g:splitjoin_join_mapping = ''
nnoremap <Leader>j :SplitjoinJoin<cr>
nnoremap <Leader>s :SplitjoinSplit<cr>



"/
"/ Custom text objects
"/
call textobj#user#plugin('function', {
\   '-': {
\     'select-a-function': 'CurrentFunctionA',
\     'select-a': 'am',
\   },
\ })

function! CurrentFunctionA()
  if getline('.') =~# '}'
    normal! k
  endif
  normal! ]M$
  let e = getpos('.')
  normal! [m
  call search('function', 'bW')
  normal! 0
  let b = getpos('.')
  if 1 < e[1] - b[1]
    return ['V', b, e]
  else
    return 0
  endif
endfunction



" vim-tmuxify
" https://github.com/jebaum/vim-tmuxify
let g:tmuxify_run = {
\   'php': 'phpunit %',
\   'js': 'jest %'
\ }

"/ VDebug
let g:vdebug_options = {
\   "port" : 9001
\}

" casestrate
let g:casetrate_leader = '<leader>c'

" function! CurrentFunctionI()
"   normal! ^
"   let head_pos = getpos('.')
"   normal! g_
"   let tail_pos = getpos('.')
"   let non_blank_char_exists_p = getline('.')[head_pos[2] - 1] !~# '\s'
"   return
"   \ non_blank_char_exists_p


"/ DBExt
let g:dbext_default_profile_mysql_ll = 'type=MYSQL:host=db:user=root:passwd=rootyroot:dbname=ll'
let g:dbext_default_window_width = 50

"/ Peekaboo
let g:peekaboo_window = 'vert bo 60new'
let g:peekaboo_delay = 500
let g:peekaboo_compact = 1

"/ Vim vue
" Prevent syntax highlighting quirks
autocmd FileType vue syntax sync fromstart


"}}}



" Section: Functions {{{1
"------------------------------------------------------------------------------

function! IPhpInsertUse()
    call PhpInsertUse()
    call feedkeys('a',  'n')
endfunction

function! IPhpExpandClass()
    call PhpExpandClass()
    call feedkeys('a', 'n')
endfunction

" 1}}}

" Section: Auto commands {{{1
"------------------------------------------------------------------------------


augroup autosyntax
  autocmd!
  autocmd FileType make setlocal ts=8 sts=8 sw=8 noexpandtab
  autocmd FileType php setlocal ts=4 sts=4 sw=4 expandtab
  autocmd FileType python setlocal ts=4 sts=4 sw=4 expandtab
  autocmd FileType elm setlocal ts=4 sts=4 sw=4 expandtab
augroup END

" augroup specialabbrev
"   autocmd!
"   autocmd FileType php :iabbrev <buffer> $ $this->
" augroup END

augroup html
  autocmd!
  " fold with \ f
  autocmd FileType html nnoremap <buffer> <localleader>f Vatzf
augroup END


" autocmd BufRead,BufNewFile *.vue setlocal filetype=vue.html.javascript.css

" Enable that with Elixir 1.6! or try to use it with ALE
" autocmd BufWritePost *.exs silent :!mix format %
" autocmd BufWritePost *.ex silent :!mix format %

" Trim trailing spaces
autocmd BufWritePre * %s/\s\+$//e



" Experimental stuff {{{1

" A function that toggles the last character of the line
function! ToggleLast()
  let line = getline('.')
  let last = strpart(line, strlen(line) - 1)
  echo 'yay'
  " normal mz$
  " if last == ';'
  "   normal r,
  " elseif last == ','
  "   normal x
  " else
  "   normal a;
  " endif
  " normal `z
endfunction

nnoremap <silent> <leader>l :call ToggleLast()<cr>

" }}}



augroup autosourcing
    autocmd!
    autocmd BufWritePost .vimrc source $MYVIMRC
augroup END

augroup learningladders
    autocmd!
    autocmd BufRead */learning-ladders/* DBSetOption profile=mysql_ll
augroup END
