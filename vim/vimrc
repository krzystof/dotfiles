"
"  _   __(_)___ ___  __________
" | | / / / __ `__ \/ ___/ ___/
" | |/ / / / / / / / /  / /__
" |___/_/_/ /_/ /_/_/   \___/
"

" Section: Learning stuff
" =======================
"
"   Improvements:
"   -------------
"   - Switch.vim (find a mapping) g-something
"
"   Mappings:
"   - use phpactor a bit more
"   - leader leader to expand snippets
"   - & to repeat the last substitution
"   - gV select visually the text that was last edited or pasted
"   - projections
"   - more snippets
"   - gb select all buffer
"
"   Text Objects:
"   - , for params
"   - c for comments
"   - e for elixir block
"   - f for function
"   - i for indent
"   - l for line
"   - v for variable segments (camelCase or snake_case)
"   - x for xml/html attribute
"   - z for fold text object
"
"   Need Practice:
"   - vim-sneak (using the \ and | shortcut)
"   - sideways ( leader sh and leader sl )
"
"   Other:
"   - set spell, and word completion (Ctrl+x Ctrl+k)
"

" Section: Config
" ===============

syntax enable

let mapleader = "\<Space>"
let maplocalleader = "\\"

set autoread
set background=dark
set backspace=indent,eol,start
set belloff=all
set clipboard=unnamed
set complete=.,w,b,u
set dictionary+=/usr/share/dict/words
set expandtab

set fillchars=fold:\  " <- need that empty space there
set foldlevelstart=6
set foldtext=MyFoldText()
set foldmethod=marker
set foldmethod=syntax
let javaScript_fold=1         " JavaScript
let perl_fold=1               " Perl
let php_folding=1             " PHP
let r_syntax_folding=1        " R
let ruby_fold=1               " Ruby
let sh_fold_enabled=1         " sh
let vimsyn_folding='af'       " Vim script
let xml_syntax_folding=1      " XML

set formatprg=par
set hidden
set ignorecase
set incsearch
set laststatus=2
set lazyredraw
set listchars=tab:▸\ ,eol:¬
set mouse=nvca
set nocompatible
set nocursorcolumn
set nocursorline
set nohlsearch
set nojoinspaces
set noshowmode
set number
set relativenumber
set rtp+=~/.fzf
set shiftwidth=2
set showbreak=…
set signcolumn=yes
set smartcase
set smartindent
set softtabstop=2
set splitbelow
set splitright
set tabstop=2
set undodir=~/.vim/undodir
set undofile
set wildignore+=*/.git,*/tmp/*,*.so,*.swp,*.zip
set wildmenu

runtime! macros/matchit.vim


" Section: Plugins
" ================

call plug#begin('~/.vim/plugged')

Plug 'nanotech/jellybeans.vim'

Plug 'tpope/vim-surround'
Plug 'tpope/vim-unimpaired'
Plug 'tpope/vim-repeat'
Plug 'tpope/vim-commentary'
Plug 'tpope/vim-git'
Plug 'tpope/vim-fugitive'
Plug 'tpope/vim-abolish'
Plug 'tpope/vim-speeddating'
Plug 'tpope/vim-eunuch'
Plug 'tpope/vim-projectionist'
Plug 'tpope/vim-dispatch'
Plug 'tpope/vim-vinegar'
Plug 'tpope/vim-db'
Plug 'machakann/vim-highlightedyank'

" Text Objects
Plug 'kana/vim-textobj-user'
Plug 'kana/vim-textobj-line'
Plug 'kana/vim-textobj-function'
Plug 'andyl/vim-textobj-elixir'
Plug 'glts/vim-textobj-comment'
Plug 'sgur/vim-textobj-parameter'
Plug 'whatyouhide/vim-textobj-xmlattr'
Plug 'jeetsukumaran/vim-indentwise'
Plug 'michaeljsmith/vim-indent-object'
Plug 'Julian/vim-textobj-variable-segment'
Plug 'kana/vim-textobj-fold'

Plug 'AndrewRadev/sideways.vim'
  nnoremap <silent> <leader>sh :SidewaysLeft<cr>
  nnoremap <silent> <leader>sl :SidewaysRight<cr>

Plug 'AndrewRadev/splitjoin.vim'
  let g:splitjoin_php_method_chain_full = 1
  nnoremap <silent> gj :SplitjoinJoin<CR>
  nnoremap <silent> gs :SplitjoinSplit<CR>

Plug 'SirVer/ultisnips'
  let g:UltiSnipsExpandTrigger="<tab>"
  let g:UltiSnipsSnippetDirectories=[$HOME."/.vim/ultisnips"]

Plug 'airblade/vim-gitgutter'

Plug 'benmills/vimux'                  " <-- both needed?
Plug 'christoomey/vim-tmux-navigator'
" Plug 'ctrlpvim/ctrlp.vim'

Plug 'junegunn/vim-easy-align'
  xmap ga <Plug>(EasyAlign)
  nmap ga <Plug>(EasyAlign)

Plug 'junegunn/fzf', { 'dir': '~/.fzf', 'do': './install --all' }
Plug 'junegunn/fzf.vim'
Plug 'editorconfig/editorconfig-vim'
Plug 'ervandew/supertab'
Plug 'gregsexton/matchtag'

Plug 'haya14busa/incsearch.vim'
  set hlsearch
  let g:incsearch#auto_nohlsearch = 1
  map    /    <Plug>(incsearch-forward)
  map    ?    <Plug>(incsearch-backward)
  map    g/   <Plug>(incsearch-stay)
  map    n    <Plug>(incsearch-nohl-n)
  map    N    <Plug>(incsearch-nohl-N)
  map    *    <Plug>(incsearch-nohl-*)
  map    #    <Plug>(incsearch-nohl-#)
  map    g*   <Plug>(incsearch-nohl-g*)
  map    g#   <Plug>(incsearch-nohl-g#)"


Plug 'itchyny/lightline.vim'
Plug 'janko-m/vim-test'
Plug 'jiangmiao/auto-pairs'

Plug 'justinmk/vim-sneak'
  let g:sneak#use_ic_scs = 1
  nnoremap s s
  nnoremap S S
  nmap \ <Plug>Sneak_s
  nmap gh <Plug>Sneak_S
  xmap \ <Plug>Sneak_s
  xmap gh <Plug>Sneak_S
  omap \ <Plug>Sneak_s
  omap gh <Plug>Sneak_S

  " repeat motion
  map ; <Plug>Sneak_;
  map , <Plug>Sneak_,

  map f <Plug>Sneak_f
  map F <Plug>Sneak_F
  map t <Plug>Sneak_t
  map T <Plug>Sneak_T

Plug 'kshenoy/vim-signature'
  let g:SignatureMarkTextHL = "Marks"

Plug 'majutsushi/tagbar'

Plug 'mileszs/ack.vim', { 'on': 'Ack' }
  let g:ackprg = 'rg --vimgrep'

Plug 'qpkorr/vim-bufkill'
Plug 'skwp/greplace.vim'             " <-- replace with workflow
Plug 'talek/obvious-resize'

Plug 'w0rp/ale'
  let g:ale_sign_warning = '▲'
  let g:ale_sign_error = '✗'
  let g:ale_echo_msg_error_str = 'E'
  let g:ale_echo_msg_warning_str = 'W'
  let g:ale_echo_msg_format = '[%linter%] %s [%severity%]'
  let g:ale_javascript_prettier_use_local_config = 1
  let g:ale_fix_on_save = 1
  let g:ale_linters = {
  \  'php': ['php', 'php_cs_fixer', 'phpmd', 'phpstan']
  \}
  let g:ale_fixers = {
  \ 'php': ['php_cs_fixer'],
  \ 'elm': ['format'],
  \ 'javascript': ['eslint']
  \}
  let g:ale_php_phpcs_standard = 'phpcs.xml'
  let g:ale_php_phpmd_ruleset = 'phpmd.xml'
  nmap <F8> <Plug>(ale_fix)

  if  my#all#GetProject() == 'planizely'
    let g:ale_fixers.javascript = ['eslint', 'prettier']
  endif

Plug 'skywind3000/asyncrun.vim'      " <-- needed?

" Languages and Syntax
Plug 'tpope/vim-endwise'
Plug 'sheerun/vim-polyglot'          " <-- do I want to keep this?
Plug 'elixir-lang/vim-elixir', { 'for': 'elixir' }
Plug 'elmcast/elm-vim', { 'for': 'elm' }
Plug 'posva/vim-vue', { 'for': 'vue' }
Plug 'styled-components/vim-styled-components', { 'for': 'jsx' }

Plug 'phpactor/phpactor', { 'for': 'php', 'do': 'composer install' }
  " nnoremap    <leader>ne          :call PhpExpandClass()<CR> <-- reimplement
  " nnoremap    <leader>ns          :call PhpSortUse()<CR>     <-- reimplement
  nnoremap    <leader>u           :call phpactor#UseAdd()<cr>
  nnoremap    <leader>mm          :call phpactor#ContextMenu()<cr>
  nnoremap    <leader>o           :call phpactor#GotoDefinition()<cr>
  nnoremap    <leader>r           :call phpactor#Transform()<cr>
  " nnoremap    <leader>cc          :call phpactor#ClassNew()<cr>
  vnoremap    <silent><leader>em  :<C-U>call phpactor#ExtractMethod()<cr>
  autocmd FileType php setlocal omnifunc=phpactor#Complete

Plug 'noahfrederick/vim-laravel'

" Plug 'arnaud-lb/vim-php-namespace'   " <-- replace by phpactor, same for composer and complete
" Plug 'noahfrederick/vim-composer'    " <-- just want to keep the command line stuff
" Plug 'shawncplus/phpcomplete.vim'    " <-- maybe replace this as well

Plug '1995eaton/vim-better-javascript-completion'
Plug 'othree/jspc.vim'                            " Parameters completion

Plug 'junegunn/vader.vim'


call plug#end()



" Section: Visual
" ===============

colorscheme jellybeans

" Make sure colored syntax mode is on, and make it Just Work with newer 256
" color terminals like iTerm2.

let g:rehash256 = 1
if has('gui_running')
  set guicursor+=n-v-c:blinkon0
  set guioptions=
else
  if $TERM == "xterm-256color" || $TERM == "screen-256color" || $COLORTERM == "gnome-terminal"
    set t_Co=256
  elseif has("terminfo")
    colorscheme default
    set t_Co=8
    set t_Sf=[3%p1%dm
    set t_Sb=[4%p1%dm
  else
    colorscheme default
    set t_Co=8
    set t_Sf=[3%dm
    set t_Sb=[4%dm
  endif
  " Disable Background Color Erase when within tmux -
  " https://stackoverflow.com/q/6427650/102704
  if $TMUX != ""
    set t_ut=
  endif
endif

highlight Normal                ctermbg=NONE
highlight nonText               ctermbg=NONE
highlight SignColumn            ctermbg=NONE
highlight TabLineFill           ctermbg=NONE
highlight CursorLineNr          ctermbg=NONE
highlight Normal                ctermbg=NONE
highlight nonText               ctermbg=NONE
highlight LineNr                ctermbg=NONE
highlight Folded                ctermbg=NONE ctermfg=grey
highlight VertSplit             ctermbg=Black
highlight NonText               ctermfg=Black
" highlight SignColumn            ctermbg=NONE
" highlight TabLineFill           ctermfg=LightGreen ctermbg=darkBlue
" highlight TabLine               ctermfg=Blue ctermbg=Yellow
" highlight TabLineSel            ctermfg=Red ctermbg=Yellow
" highlight Normal                cterm=NONE ctermbg=NONE
" highlight StatusLine            cterm=NONE ctermbg=blue ctermfg=white
highlight GitGutterAdd          ctermfg=darkgreen   ctermbg=NONE
highlight GitGutterChange       ctermfg=yellow      ctermbg=NONE
highlight GitGutterDelete       ctermfg=darkred     ctermbg=NONE
highlight GitGutterChangeDelete ctermfg=lightgreen  ctermbg=NONE
highlight Marks                 ctermfg=blue        ctermbg=NONE
highlight NiceError             ctermfg=red         ctermbg=NONE
highlight NiceWarning           ctermfg=yellow      ctermbg=NONE
highlight link ALEWarningSign   NiceWarning
highlight link ALEErrorSign     NiceError

" Section: Mappings
" =================

noremap  <silent>  <leader>z     [[zf][]zc
inoremap <silent>  jk            <Esc>
noremap  <silent>  k             gk
noremap  <silent>  j             gj
nnoremap <silent>  &             :&&<Enter>
xnoremap <silent>  &             :&&<Enter>
nmap     <silent>  <leader>)     ys$)
nnoremap <silent>  <backspace>   :e#<cr>

nnoremap <leader>p      =p
nnoremap <leader>P      =P

nnoremap    K                 :w<cr>
nnoremap    <C-s>             :w<CR>
inoremap    <C-s>             <Esc>:w<CR>
nnoremap    gV                `[v`]
nnoremap    ==                mz=ap`z
" nnoremap    gh                ^
" nnoremap    gl                $

nmap <C-Up>   [e
nmap <C-Down> ]e
vmap <C-Up>   [egv
vmap <C-Down> ]egv

nnoremap    Q                   :BD<cr>
nnoremap    [w                  :tabprevious<CR>
nnoremap    ]w                  :tabnext<CR>

" Command Mode:
" Emacs-like bindings in command line -- `:help emacs-keys`
cnoremap <C-a>  <Home>
cnoremap <C-e>  <End>
cnoremap <C-h>  <S-Left>
cnoremap <C-l>  <S-Right>

" Expand %% to current file directory in command line mode
cnoremap <expr> %% getcmdtype() == ':' ? expand('%:h').'/' : '%%'

" How to toggle fold in a nice way??
" vnoremap <M-f> zf
" nnoremap <cr> za


" in insert mode, uppercase the current word
inoremap    <c-u>               <esc>gUiwea

nnoremap    <leader>2           :TagbarToggle<CR>
nnoremap    <leader>;           :call ToggleLast()<cr>

nnoremap    <leader>a<space>    :Ack<space>
nnoremap    <leader>aa          :Ack <C-r><C-w> app/<cr>
nnoremap    <leader>aj          :Ack <C-r><C-w> jsapp/<cr>
nnoremap    <leader>ar          :Ack <C-r><C-w> resources/assets/<cr>
nnoremap    <leader>as          :Ack <C-r><C-w> src/<cr>
nnoremap    <leader>at          :Ack <C-r><C-w> test/<cr>
nnoremap    <leader>av          :Ack <C-r><C-w> vendor/<cr>
nnoremap    <leader>aw          :Ack <C-r><C-w><cr>
vnoremap    <leader>aw          y :Ack <C-r>"<cr>

nnoremap    <leader>b           :Buffers<cr>
nnoremap    <leader>f           :Files<cr>
nnoremap    <leader>li          :Lines<cr>
nnoremap    <leader>:           :History:<cr>
nnoremap    <leader>]           :Tags<cr>
nnoremap    <leader>m           :Marks<cr>
nnoremap    <leader>h           :History<cr>
nnoremap    <leader>ven         :Files vendor/<cr>

nnoremap    <leader>ds          "=strftime("%d/%m/%Y")<CR>P
nnoremap    <leader>dl          "=strftime("%Y-%m-%d %H:%M:%S")<CR>P

nnoremap    <leader>dj          :+delete<cr>
nnoremap    <leader>dk          :-delete<cr>

nnoremap    <leader>ev          :tabedit $MYVIMRC<cr>
nnoremap    <leader>ep          :vsplit ~/Dropbox/Documents/pass.md<cr>
nnoremap    <leader>es          :UltiSnipsEdit<cr>

nnoremap    <Leader>i           vip:sort<CR>
nnoremap    <leader>g           :Gstatus<CR>

nnoremap    <expr> gb           '`[' . strpart(getregtype(), 0, 1) . '`]'

nnoremap    <leader>pro         :tabe .projections.json<cr>
nnoremap    <leader>q           :call ToggleList("Quickfix List", 'c')<CR>
nnoremap    <leader>lo          :call ToggleList("Location List", 'l')<CR>

nnoremap    <leader>tt          :TestNearest<CR>
nnoremap    <leader>tf          :TestFile<CR>
nnoremap    <leader>ta          :TestSuite<CR>
nnoremap    <leader>tl          :TestLast<CR>
nnoremap    <leader>tg          :TestVisit<CR>
nnoremap    <leader>tsb         :let test#strategy = 'basic'<CR>
nnoremap    <leader>tsd         :let test#strategy = 'dispatch'<CR>

nnoremap    <Leader>vq          :VimuxCloseRunner<CR>
nnoremap    <Leader>vz          :call VimuxZoomRunner()<CR>
nnoremap    <Leader>vi          :VimuxInspectRunner<CR>
map         <Leader>vl          :VimuxRunLastCommand<CR>
map         <Leader>vp          :VimuxPromptCommand<CR>
nnoremap    <leader>vr          :call VimuxRunLastCommand()<CR>
nnoremap    <leader>vc          :call VimuxCloseRunner()<CR>
" nnoremap    <leader>w           :Files <c-r><c-w>            <-- does not work



" Window Switching:
nnoremap <C-j> <C-w><C-j>
nnoremap <C-k> <C-w><C-k>
nnoremap <C-h> <C-w><C-h>
nnoremap <C-l> <C-w><C-l>

" Terminal stuff
tnoremap <C-h> <c-\><c-n><c-w>h
tnoremap <C-j> <c-\><c-n><c-w>j
tnoremap <C-k> <c-\><c-n><c-w>k
tnoremap <C-l> <c-\><c-n><c-w>l
tnoremap jk   <C-\><C-n>

inoremap    <c-x><c-]>          <c-]>


" Operator Pending Movement:
" Interesting. Keep in mind.
" Need to re-read "learn vimscript the hard way" chapter
onoremap    p                   i(
onoremap    in(                 :<c-u>normal! f(vi(<cr>
onoremap    il(                 :<c-u>normal! F)vi(<cr>


command! Wip call VimuxRunCommand('u --group wip')
command! So :source $MYVIMRC
command! Doc call FindDoc()
" command! -nargs=1 Doc call FindDoc(<f-args>)



" Section: ToSort: Plugins
" ========================

"/ VimCommentary
autocmd FileType php setlocal commentstring=\/\/\ %s
autocmd FileType vue setlocal commentstring=\/\/\ %s

""/ CtrlP
let g:ctrlp_extensions = ['tag']
" let g:ctrlp_match_window = 'top,order:ttb,min:1,max:20,results:20'    " window to the top and other settings
let g:ctrlp_custom_ignore = '\v[\/](\.git|\.hg|node_modules|vendor|_build|deps|*.beam)$' " ignore package managers huge folders

" set grepprg=ag\ --nogroup\ --nocolor
" let g:ctrlp_user_command = 'ag %s -l --nocolor -g ""'
" let g:ctrlp_use_caching = 1

set grepprg=rg\ --color=never
let g:ctrlp_user_command = 'rg %s --files --color=never --glob ""'
let g:ctrlp_use_caching = 1


"/ VIM Test
" let test#strategy = "dispatch"
let test#strategy = "vimux"

"/ AutoPairs
let g:AutoPairsShortcutBackInsert = '<C-b>'

"/ Supertab
let g:SuperTabLongestEnhanced=1
let g:SuperTabLongestHighlight=1



"
"/ Composer
"
nmap <leader>c    <Plug>(composer-find)






"/ Obvious Resize
let g:obvious_resize_default = 5
nnoremap <silent>    <Up> :<C-U>ObviousResizeUp<CR>
nnoremap <silent>  <Down> :<C-U>ObviousResizeDown<CR>
nnoremap <silent>  <Left> :<C-U>ObviousResizeLeft<CR>
nnoremap <silent> <Right> :<C-U>ObviousResizeRight<CR>

"/ vimux
" let g:VimuxOrientation = "h"
" let g:VimuxHeight = "30"

"/ Lightline
let g:lightline = {
\ 'colorscheme': 'jellybeans',
\ 'active': {
\   'left': [['mode', 'paste'], ['filename', 'modified']],
\   'right': [['lineinfo'], ['percent'], ['readonly', 'linter_warnings', 'linter_errors', 'linter_ok']]
\ },
\ 'component_expand': {
\   'linter_warnings': 'LightlineLinterWarnings',
\   'linter_errors': 'LightlineLinterErrors'
\ },
\ 'component_type': {
\   'readonly': 'error',
\   'linter_warnings': 'warning',
\   'linter_errors': 'error',
\   'linter_ok': 'success'
\ },
\ 'component-function': {
\   'gitbranch': 'fugitive#head',
\   'filename': 'LightlineFilename'
\ },
\ }

function! LightlineLinterWarnings() abort
  let l:counts = ale#statusline#Count(bufnr(''))
  let l:all_errors = l:counts.error + l:counts.style_error
  let l:all_non_errors = l:counts.total - l:all_errors
  return l:counts.total == 0 ? '' : printf('%d ◆', all_non_errors)
endfunction

function! LightlineLinterErrors() abort
  let l:counts = ale#statusline#Count(bufnr(''))
  let l:all_errors = l:counts.error + l:counts.style_error
  let l:all_non_errors = l:counts.total - l:all_errors
  return l:counts.total == 0 ? '' : printf('%d ✗', all_errors)
endfunction

function! LightlineLinterOK() abort
  let l:counts = ale#statusline#Count(bufnr(''))
  let l:all_errors = l:counts.error + l:counts.style_error
  let l:all_non_errors = l:counts.total - l:all_errors
  return l:counts.total == 0 ? '✓ ' : ''
endfunction

function! LightlineFilename()
  return &filetype ==# 'vimfiler' ? vimfiler#get_status_string() :
        \ &filetype ==# 'unite' ? unite#get_status_string() :
        \ &filetype ==# 'vimshell' ? vimshell#get_status_string() :
        \ expand('%:t') !=# '' ? expand('%:t') : '[No Name]'
endfunction

autocmd User ALELint call s:MaybeUpdateLightline()

" Update and show lightline but only if it's visible (e.g., not in Goyo)
function! s:MaybeUpdateLightline()
  if exists('#lightline')
    call lightline#update()
  end
endfunction





" Section: ToSort: More Plugin Conf
" =========================

"/
"/ Custom text objects
"/
" call textobj#user#plugin('function', {
" \   '-': {
" \     'select-a-function': 'CurrentFunctionA',
" \     'select-a': 'am',
" \   },
" \ })

" function! CurrentFunctionA()
"   if getline('.') =~# '}'
"     normal! k
"   endif
"   normal! ]M$
"   let e = getpos('.')
"   normal! [m
"   call search('function', 'bW')
"   normal! 0
"   let b = getpos('.')
"   if 1 < e[1] - b[1]
"     return ['V', b, e]
"   else
"     return 0
"   endif
" endfunction



" vim-tmuxify
" https://github.com/jebaum/vim-tmuxify
let g:tmuxify_run = {
\   'php': 'phpunit %',
\   'js': 'jest %'
\ }

"/ VDebug
let g:vdebug_options = {
\   "port" : 9001
\}



"/ Vim vue
let g:vue_disable_pre_processors=1
autocmd BufRead,BufNewFile *.vue setlocal filetype=vue.html.css.javascript

" Prevent syntax highlighting quirks
autocmd FileType vue.* syntax sync fromstart



" Section: Abbreviations
" ======================

iabbrev r return
iabbrev rq request
iabbrev rs response
iabbrev fu function
iabbrev reutrn return
iabbrev retrun return
iabbrev repsonse response
iabbrev gropu group

autocmd BufEnter *.js  iabbr zzz console.log('ZZZ',
autocmd BufEnter *.vue iabbr xxx console.log('XXX',
autocmd BufEnter *.vue iabbr yyy console.log('YYY',
autocmd BufEnter *.vue iabbr zzz console.log('ZZZ',



" Section: Functions
" ==================

function! MyFoldText()
    let line = getline(v:foldstart)

    let nucolwidth = &fdc + &number * &numberwidth
    let windowwidth = winwidth(0) - nucolwidth - 3
    let foldedlinecount = v:foldend - v:foldstart

    " expand tabs into spaces
    let onetab = strpart('          ', 0, &tabstop)
    let line = substitute(line, '\t', onetab, 'g')

    let line = strpart(line, 0, windowwidth - 2 -len(foldedlinecount))
    let fillcharcount = windowwidth - len(line) - len(foldedlinecount)
    return line . '…' . repeat(" ",fillcharcount) . foldedlinecount . '…' . ' '
endfunction

function! ToggleLast()
  let l:line = getline('.')
  let l:last = strpart(line, strlen(line) - 1)

  normal! mz

  if last == ';'
    normal! $r,
  elseif last == ','
    normal! $x
  else
    normal! A;
  endif

  normal! `z
endfunction

function! GetBufferList()
  redir =>buflist
  silent! ls!
  redir END
  return buflist
endfunction

function! ToggleList(bufname, pfx)
  let buflist = GetBufferList()
  for bufnum in map(filter(split(buflist, '\n'), 'v:val =~ "'.a:bufname.'"'), 'str2nr(matchstr(v:val, "\\d\\+"))')
    if bufwinnr(bufnum) != -1
      exec(a:pfx.'close')
      return
    endif
  endfor
  if a:pfx == 'l' && len(getloclist(0)) == 0
      echohl ErrorMsg
      echo "Location List is Empty."
      return
  endif
  let winnr = winnr()
  exec(a:pfx.'open')
  if winnr() != winnr
    wincmd p
  endif
endfunction



" Section: Work In Progress
" =========================

function! ToggleQuotes()
  " @TODO
endfunction

function! SplitNextArrow()
  let l:arrow_or_paren = search('\v(\(|\S\zs-\>\ze)', '', line('.'))
  if ! arrow_or_paren
    return
  endif
  if matchstr(getline('.'), '\%' . col('.') . 'c.') == '('
    normal! %
  else
    normal! i
  endif
  call SplitNextArrow()
endfunction




" Working on the FIND DOC thing
" -----------------------------
function! s:snakecase(word)
  let word = substitute(a:word,'::','/','g')
  let word = substitute(word,'\(\u\+\)\(\u\l\)','\1_\2','g')
  let word = substitute(word,'\(\l\|\d\)\(\u\)','\1_\2','g')
  let word = substitute(word,'[.-]','_','g')
  let word = tolower(word)
  return word
endfunction

function! s:dashcase(word)
  return substitute(s:snakecase(a:word),'_','-','g')
endfunction

function! FindDoc(...)
  " @TODO:
  " php
  " js
  " elm
  " elixir
  " rust
  let l:name = a:0 == 1 ? a:1 : expand("<cword>")

  if &filetype =~ 'javascript'
    let module = s:dashcase(name)
    let moduledir = "node_modules/" . module
    if isdirectory(moduledir)
      execute "tabedit " . moduledir
    endif
  endif

  " if &filetype =~ 'php'
    " Do something to use composer autoloader?
    " Or defer to vim composer package
  " endif

  " and then
  " - Elm
  " - Elixir
  " - Rust
endfunction


function! CenterPane()
  lefta vnew
  wincmd w
  exec 'vertical resize '. string(&columns * 0.75)
endfunction


function! WriterMode()
  set noshowmode
  set noshowcmd
  set scrolloff=999
  set textwidth=80
  set nonumber
  set norelativenumber
  set laststatus=0
  set formatoptions=
  call CenterPane()
endfunction

command! WriterMode :call WriterMode()

function! DeWriteMode()
  set showmode
  set showcmd
  set scrolloff=5
  set textwidth=0
  set number
  set relativenumber
  set laststatus=2
  set formatoptions=croql
endfunction

function! YarnAdd()
  execute ':AsyncRun yarn add ' . expand('<cword>')
endfunction

command! YarnAdd :call YarnAdd()

function! ExtractFirstArg()
  let line = getline('.')
  let line = substitute(line, 'some_func', '', '')
  return substitute(line, '\v[\(\)]', '', 'g')
endfunction



" Section: Auto commands
" ======================

augroup autosyntax
  autocmd!
  autocmd FileType make   setlocal ts=8 sts=8 sw=8 noexpandtab
  autocmd FileType php    setlocal ts=4 sts=4 sw=4 expandtab
  autocmd FileType rust   setlocal ts=4 sts=4 sw=4 expandtab
  autocmd FileType python setlocal ts=4 sts=4 sw=4 expandtab
  autocmd FileType elm    setlocal ts=4 sts=4 sw=4 expandtab
augroup END

augroup syntaxspecifics
  autocmd!
  autocmd FileType php :iabbrev <buffer> $ $this->

  " fold with \ f
  autocmd FileType markdown     nnoremap <buffer> <leader>p      gqap
  autocmd FileType javascript   nnoremap <buffer> <leader>pre    :%!prettier<cr>
augroup END


" Enable that with Elixir 1.6! or try to use it with ALE
" autocmd BufWritePost *.exs silent :!mix format %
" autocmd BufWritePost *.ex silent :!mix format %

" Trim trailing spaces
augroup fixers
  autocmd BufWritePre * %s/\s\+$//e
augroup END

autocmd BufReadPost * if line("'\"") > 0 && line("'\"") <= line("$")
    \| exe "normal! g'\"" | endif

" vim:fdm=expr:fen:fdl=2:foldexpr=getline(v\:lnum)=~'\"\\sSection'?'>1'\:'=':
