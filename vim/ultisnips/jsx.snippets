extends html
extends javascript

snippet cdm
componentDidMount = () => ${1:{$0}}
endsnippet

snippet ss
this.setState(${1:prevState => ({$0})})
endsnippet

snippet cn
className="$0"
endsnippet

snippet reactfunc "Functional component" b
import React, { Component } from 'react'
import PropTypes from 'prop-types'

const `!v my#js#jsx_filename_to_name()` = (${1}) => (
	<div>
		${2}
	</div>
)

export default `!v my#js#jsx_filename_to_name()`
endsnippet

snippet reactclass "Simple component" b
import React, {Component} from 'react'

class `!v my#js#jsx_filename_to_name()` extends Component {
	// static propTypes = {}

	state = {}

	render() {
		return (
			<div>
				${1:go on}
			</div>
		)
	}
}

export default `!v my#js#jsx_filename_to_name()`
endsnippet

snippet _react "React component" b
import React, { Component } from 'react'
import PropTypes from 'prop-types'

export default class `!v my#js#jsx_filename_to_name()` extends Component {
	static propTypes = {}

	state = {}

	render() {
		return (
			<div>
				${1:go on}
			</div>
		)
	}
}
endsnippet

snippet reacttest "Jest Test"
/* eslint-env jest */
import React from 'react'
import {render, cleanup, fireEvent, waitForElement} from 'react-testing-library'
import renderer from 'react-test-renderer'
import `!v my#js#test_file_to_name()` from '../`!v my#js#test_file_to_name()`'

describe('`!v my#js#test_file_to_name()`', () => {
  test('${1}', () => {
		${2}
		expect('stuff').toBe('tested')
  })
})
endsnippet
