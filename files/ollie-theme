# black
# blue
# green
# yellow
# cyan
# white
# magenta
# red

# Load dependencies.
pmodload 'helper'

# Define variables.
_prompt_paradox_current_bg='NONE'
_prompt_paradox_start_time=$SECONDS

function prompt_paradox_start_segment {
  local bg fg
  [[ -n "$1" ]] && bg="%K{$1}" || bg="%k"
  [[ -n "$2" ]] && fg="%F{$2}" || fg="%f"
  if [[ "$_prompt_paradox_current_bg" != 'NONE' && "$1" != "$_prompt_paradox_current_bg" ]]; then
    print -n " $bg%F{$_prompt_paradox_current_bg}$fg "
  else
    print -n "$bg$fg "
  fi
  _prompt_paradox_current_bg="$1"
  [[ -n "$3" ]] && print -n "$3"
}

function prompt_paradox_build_prompt {
  prompt_paradox_start_segment default default '\n%(?::%K{red}%F{255} üò†  %f%k )%(!:%F{yellow}‚ö° :)%(1j:%F{cyan}‚öô :)'
  prompt_paradox_start_segment default blue '$_prompt_paradox_pwd'

  if [[ -n "$git_info" ]]; then
    prompt_paradox_start_segment default default '%K{8}%F{255} ${(e)git_info[ref]}${(e)git_info[status]} %k%f'
  fi
}

function prompt_paradox_pwd {
  local pwd="${PWD/#$HOME/~}"

  if [[ "$pwd" == (#m)[/~] ]]; then
    _prompt_paradox_pwd="%F{yellow}in $MATCH%f"
    unset MATCH
  else
    _prompt_paradox_pwd="%F{yellow}in ${${${${(@j:/:M)${(@s:/:)pwd}##.#?}:h}%/}//\%/%%}/${${pwd:t}//\%/%%}%f"
  fi
}

function prompt_paradox_print_elapsed_time {
  local end_time=$(( SECONDS - _prompt_paradox_start_time ))
  local hours minutes seconds remainder

  if (( end_time >= 3600 )); then
    hours=$(( end_time / 3600 ))
    remainder=$(( end_time % 3600 ))
    minutes=$(( remainder / 60 ))
    seconds=$(( remainder % 60 ))
    print -P "%K{red}%F{white} üò†  ${hours}h${minutes}m${seconds}s  %b"
  elif (( end_time >= 60 )); then
    minutes=$(( end_time / 60 ))
    seconds=$(( end_time % 60 ))
    print -P " %K{yellow}%F{black} üòë  ${minutes}m${seconds}s  %b"
  elif (( end_time > 10 )); then
    print -P " %K{green}%F{255} üòÉ  ${end_time}s  %b"
  fi
}

function prompt_paradox_precmd {
  setopt LOCAL_OPTIONS
  unsetopt XTRACE KSH_ARRAYS

  # Format PWD.
  prompt_paradox_pwd

  # Get Git repository information.
  if (( $+functions[git-info] )); then
    git-info
  fi

  # Calculate and print the elapsed time.
  prompt_paradox_print_elapsed_time
}

function prompt_paradox_preexec {
  _prompt_paradox_start_time="$SECONDS"
}

function prompt_paradox_setup {
  setopt LOCAL_OPTIONS
  unsetopt XTRACE KSH_ARRAYS
  prompt_opts=(cr percent subst)

  # Load required functions.
  autoload -Uz add-zsh-hook

  # Add hook for calling git-info before each command.
  add-zsh-hook preexec prompt_paradox_preexec
  add-zsh-hook precmd prompt_paradox_precmd

  # Set editor-info parameters.
  zstyle ':prezto:module:editor:info:completing' format '%B%F{red}...%f%b'
  zstyle ':prezto:module:editor:info:keymap:primary' format ''
  zstyle ':prezto:module:editor:info:keymap:primary' format '%B%F{red}say...%f%b'
  zstyle ':prezto:module:editor:info:keymap:primary:overwrite' format '%F{red}‚ô∫%f'
  zstyle ':prezto:module:editor:info:keymap:alternate' format '%B%F{red}[normal mode]%f%b'

  # Set git-info parameters.
  zstyle ':prezto:module:git:info' verbose 'yes'
  zstyle ':prezto:module:git:info:action' format ' %F{3}‚Åù%f %s'
  zstyle ':prezto:module:git:info:added' format ' %F{green}‚úö%f'
  zstyle ':prezto:module:git:info:ahead' format ' %F{green}‚¨ÜÔ∏è%f '
  zstyle ':prezto:module:git:info:behind' format ' %F{green}‚¨áÔ∏è%f '
  zstyle ':prezto:module:git:info:branch' format 'üîÄ %b'
  zstyle ':prezto:module:git:info:commit' format '‚û¶ %.7c'
  zstyle ':prezto:module:git:info:deleted' format ' %F{red}‚úñ%f '
  zstyle ':prezto:module:git:info:dirty' format ' %F{yellow}‚ÅâÔ∏è%f '
  zstyle ':prezto:module:git:info:modified' format ' %F{green}‚ùóÔ∏è%f '
  zstyle ':prezto:module:git:info:position' format '%p'
  zstyle ':prezto:module:git:info:renamed' format ' ‚ûô'
  zstyle ':prezto:module:git:info:stashed' format ' %F{7}üìî%f '
  zstyle ':prezto:module:git:info:unmerged' format ' ‚ïê'
  zstyle ':prezto:module:git:info:untracked' format ' %F{white}‚ùì%f '
  zstyle ':prezto:module:git:info:keys' format \
    'ref' '$(coalesce "%b" "%p" "%c")' \
    'status' '%s%D%A%B%S%a%d%m%r%U%u'

  # Define prompts.
  # ‚ôØ ùÑã ‚ô™ üó≤ ‚åÅ 
  PROMPT='${(e)$(prompt_paradox_build_prompt)} ${editor_info[keymap]}
 %F{white}üó≤ %f '
 # %K{blue}%F{white}üó≤ %k%f '
  SPROMPT='zsh: correct %F{red}%R%f to %F{green}%r%f [nyae]? '
}

prompt_paradox_setup "$@"
