 " General basic necessary plugins
set nocompatible                "Be iMproved, required
set backspace=indent,eol,start  "Make backspace behave well
syntax on                       "Enable syntax highlighting
filetype plugin indent on       "Enable file type detection and do language-dependent indenting.
so ~/.vim/plugins.vim           " Source the plugins file

"/ gogen ----> GENERAL
"/ goplu ----> PLUGINS
"/ gofun ----> FUNCTIONS
"/ gomap ----> MAPPINGS

"/
"/ gogen ----> GENERAL CONFIG
"/

syntax enable
let mapleader = ','
set smartindent
set number
set relativenumber
set tabstop=8
set expandtab
set softtabstop=4                        " Insert mode
set shiftwidth=4                         " Spaces when using < and >
set complete=.,w,b,u                     " Autocomplete looks through current buffer, window, loaded buffers, unloaded buffers
set wildignore+=*/tmp/*,*.so,*.swp,*.zip


" Map ctrl+s to save
<<<<<<< Updated upstream
nmap <c-s> :w<CR>
imap <c-s> <Esc>:w<CR>a
" Substitute word under the cursor
nnoremap <Leader>s :%s/\<<C-r><C-w>\>//g<Left><Left>



" Move by showed line?
nmap k gk
nmap j gj



"------Visuals
colorscheme srcery
" dfferent colorscheme for ruby and markdown, for example
" autocmd FileType ruby colorscheme railcasts

colorscheme srcery
set t_CO=256                             "Use 256 colors
set laststatus=2                         "Always display the status bar
let g:airline_powerline_fonts = 0
let g:airline_theme='aurora'
hi LineNr ctermfg=DarkGrey


"------Search
set hlsearch
set incsearch
set ignorecase


"------Splits
set splitbelow
set splitright



"/
"/ gofun ----> FUNCTIONS
"/

function! RenameFile()
  let old_name = expand('%')
  let new_name = input('New file name: ', expand('%'), 'file')
  if new_name != '' && new_name != old_name
    exec ':saveas ' . new_name
    exec ':silent !rm ' . old_name
    redraw!
  endif
endfunction


function! IPhpInsertUse()
    call PhpInsertUse()
    call feedkeys('a',  'n')
endfunction
function! IPhpExpandClass()
    call PhpExpandClass()
    call feedkeys('a', 'n')
endfunction




"/
"/ gomap ----> MAPPINGS
"/

" Map ctrl+s to save
nmap <C-s> :w<CR>

nmap <C-j> <C-w><C-j>
nmap <C-k> <C-w><C-k>
nmap <C-h> <C-w><C-h>
nmap <C-l> <C-w><C-l>

noremap     <Space>             :
nmap        <Leader>;           :SyntasticToggleMode<cr>
nmap        <Leader><space>     :nohlsearch<cr>
nmap        <Leader>\|          :vsp<cr>
nmap        <Leader>-           :sp<cr>
nmap        <Leader><           :SyntasticToggleMode<cr>

nmap        <Leader>1           :NERDTreeToggle<cr>
nnoremap    <Leader>2           :TagbarToggle<CR>

" a for ack
nmap        <Leader>aa          :Ack<space>
nnoremap    <Leader>af          :Ack \<<C-r><C-w>\><cr>
"e for edit
nmap        <Leader>ev          :tabedit ~/.vimrc<cr>
nmap        <Leader>ep          :tabedit ~/.vim/plugins.vim<cr>
nmap        <Leader>es          :tabedit ~/.vim/UltiSnips/
" f for file
map         <Leader>fn          :call RenameFile()<cr>
" g for go
nnoremap    <Leader>gr          :e bootstrap/routes.php<CR>
" p for php
inoremap    <Leader>pi          <Esc>:call IPhpInsertUse()<CR>
noremap     <Leader>pi          :call PhpInsertUse()<CR>
inoremap    <Leader>pe          <Esc>:call IPhpExpandClass()<CR>
noremap     <Leader>pe          :call PhpExpandClass()<CR>
noremap     <Leader>ps          :call PhpSortUse()<CR>
" r for replace
nnoremap    <Leader>rw          :%s/\<<C-r><C-w>\>//g<Left><Left>
" s for search
nmap        <Leader>sr          :CtrlPMRUFiles<cr>
nmap        <Leader>st          :CtrlPTag<cr>
" t for test
nnoremap    <silent><leader>tt  :TestNearest<CR>
nnoremap    <silent><leader>tT  :TestFile<CR>
nnoremap    <silent><leader>ta  :TestSuite<CR>
nnoremap    <silent><leader>tl  :TestLast<CR>






"/
"/ goplu ----> PLUGINS
"/

"/ CtrlP
let g:ctrlp_extensions = ['tag']
let g:ctrlp_match_window = 'top,order:ttb,min:1,max:30,results:30'    " window to the top and other settings
let g:ctrlp_custom_ignore = '\v[\/](\.git|\.hg|node_modules|vendor)$' " ignore package managers huge folders
let g:ctrlp_custom_ignore = '\v[\/](\.git|\.hg|node_modules|vendor)$'

"/ NERDTree
let NERDTreeHijackNetrw = 0                                           " NERD tree is messing with vinegar...

"/ Elm
let g:elm_format_autosave = 1

"/ VIM Test
" Dispatch to use the quickfix window
let test#strategy = "dispatch"

"/ AutoPairs
let g:AutoPairsShortcutBackInsert = '<C-b>'

"/ UltiSnips
let g:UltiSnipsExpandTrigger="<tab>"
let g:UltiSnipsJumpForwardTrigger="<tab>"
let g:UltiSnipsJumpBackwardTrigger="<S-tab>"

"/ VimAck
" Use the silversearcher
let g:ackprg = 'ag --vimgrep'


"/ Syntastic
set statusline+=%#warningmsg#
set statusline+=%{SyntasticStatuslineFlag()}
set statusline+=%*

"/ VimAck
" Use the silversearcher
let g:ackprg = 'ag --vimgrep'



let g:syntastic_always_populate_loc_list = 1
let g:syntastic_auto_loc_list = 1
let g:syntastic_check_on_open = 1
let g:syntastic_check_on_wq = 0

" PHP
let g:syntastic_php_checkers = ['php', 'phpcs']
let g:syntastic_php_phpcs_args = "--standard=psr2 --exclude=CamelCapsFunctionNameStandard"


" JS
let g:syntastic_javascript_checkers = ['eslint']
let g:syntastic_javascript_eslint_exe = 'eslint %'  " Just lint the current file


" Number toggle

let g:NumberToggleTrigger="<F2>"


"/ Autocorrect by abbrev
iabbrev reutrn return
iabbrev repsonse response
iabbrev gropu group


"------Auto-Commands
augroup autosourcing
    autocmd!
    autocmd BufWritePost .vimrc source %
augroup END
